2+2
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tidyverse")
library(tidyverse)
wes_moore_contributions <- read_csv("https://raw.githubusercontent.com/stephenneukam/CNS_Annapolis/main/Campaign_finance/Moore_ContributionsList.csv")
View(wes_moore_contributions)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
# Remove scientific notation
options(scipen=999)
# Load the tidyverse
library(tidyverse)
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=10)
problems()
View(payments)
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=373564)
glimpse(payments)
payments |>
filter(str_length(`Vendor Zip`) < 5) |>
group_by(`Vendor Zip`) |>
summarise(
count=n()
) |>
arrange(desc(count))
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
View(md_grants_loans)
md_grants_loans |>
group_by(`Fiscal Year`, Category) |>
summarize(count = n()) |>
arrange(`Fiscal Year`)
md_grants_loans |>
arrange(Amount)
install.packages('janitor')
library(janitor)
# cleaning function
cleaned_md_grants_loans <- md_grants_loans |>
clean_names()
# display the cleaned dataset
cleaned_md_grants_loans
# cleaning function
cleaned_md_grants_loans <- md_grants_loans |>
clean_names() |>
rename(source = grantor)
# display the cleaned dataset
cleaned_md_grants_loans
# cleaning function
cleaned_md_grants_loans <- md_grants_loans |>
clean_names() |>
rename(source = grantor) |>
mutate(source = str_to_upper(source), grantee = str_to_upper(grantee), description = str_to_upper(description))
# display the cleaned dataset
cleaned_md_grants_loans
cleaned_md_grants_loans |>
get_dupes()
# cleaning function
cleaned_md_grants_loans <- md_grants_loans |>
clean_names() |>
rename(source = grantor) |>
mutate(source = str_to_upper(source), grantee = str_to_upper(grantee), description = str_to_upper(description)) |>
distinct()
# display the cleaned dataset
cleaned_md_grants_loans
# cleaning function
cleaned_md_grants_loans <- md_grants_loans |>
clean_names() |>
rename(source = grantor) |>
mutate(source = str_to_upper(source), grantee = str_to_upper(grantee), description = str_to_upper(description)) |>
distinct() |>
mutate(zip5 = str_sub(zip_code, start=1L, end=5L))
# display the cleaned dataset
cleaned_md_grants_loans
# cleaning function
cleaned_md_grants_loans <- md_grants_loans |>
clean_names() |>
rename(source = grantor) |>
mutate(source = str_to_upper(source), grantee = str_to_upper(grantee), description = str_to_upper(description)) |>
distinct() |>
mutate(zip5 = str_sub(zip_code, start=1L, end=5L)) |>
mutate(zip5 = case_when(
zip5 == "Vario" ~ NA,
zip5 == "UB7 O" ~ NA,
zip5 == "UB7 " ~ NA,
.default = zip5
))
# display the cleaned dataset
cleaned_md_grants_loans
payments |>
filter(str_length(`Vendor Zip`) < 5) |>
group_by(`Vendor Zip`) |>
summarise(
count=n()
) |>
arrange(desc(count))
md_grants_loans |>
group_by(`Fiscal Year`, Category) |>
summarize(count = n()) |>
arrange(`Fiscal Year`)
md_grants_loans |>
arrange(Amount)
View(cleaned_md_grants_loans)
cleaned_md_grants_loans |>
filter(str_detect(source, "MARYLAND TOURISM BOARD"))
cleaned_md_grants_loans |>
filter(str_detect(source, "MARYLAND TOURISM BOARD"))|>
group_by(zip5)
cleaned_md_grants_loans |>
filter(str_detect(source, "MARYLAND TOURISM BOARD"))|>
group_by(zip5)|>
summarize(amount)
cleaned_md_grants_loans |>
filter(str_detect(source, "MARYLAND TOURISM BOARD"))|>
group_by(zip5)|>
summarize(n)
cleaned_md_grants_loans |>
filter(str_detect(source, "MARYLAND TOURISM BOARD"))|>
group_by(zip5)|>
summarize sum(amount)
cleaned_md_grants_loans |>
filter(str_detect(source, "MARYLAND TOURISM BOARD"))
cleaned_md_grants_loans |>
filter(str_detect(source, "MARYLAND TOURISM BOARD"))|>
group_by(zip5)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse
library(tidyverse)
# Load janitor
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse
library(tidyverse)
# Load janitor
library(janitor)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=373564)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=373564)
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
View(md_grants_loans)
View(payments)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=373564)
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")|>
cleaned_md_grants_loans <- md_grants_loans |>
clean_names()
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=373564)
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
cleaned_md_grants_loans <- md_grants_loans |>
clean_names()
cleaned_md_grants_loans
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=373564)
cleaned_md_payments <- payments |>
clean_names()
cleaned_md_payments
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
cleaned_md_grants_loans <- md_grants_loans |>
clean_names()
cleaned_md_grants_loans
View(cleaned_md_payments)
cleaned_md_payments |>
filter(str_detect(agency_name, "PRINCE GEORGE"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGE"))
```{r}
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGE"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS"&"PRINCE GEORGES COUNTY PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS" & "PRINCE GEORGES COUNTY PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS""PRINCE GEORGES COUNTY PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS"|"PRINCE GEORGES COUNTY PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_like(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS")|str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS"))
cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS")|str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS")|str_detect(vendor_name, "PG COUNTY PUBLIC SCHOOL"))
pg_schools<-cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS")|str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS")|str_detect(vendor_name, "PG COUNTY PUBLIC SCHOOL"))
View(pg_schools)
pg_schools<-cleaned_md_payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES PUBLIC SCHOOLS")|str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS")|str_detect(vendor_name, "PG COUNTY PUBLIC SCHOOL"))
pg_schools |>
group_by(fiscal_year) |>
summarize(count = n()) |>
arrange(`Fiscal Year`)
pg_schools |>
group_by(fiscal_year) |>
summarize(count = n()) |>
arrange(fiscal_year)
pg_schools |>
group_by(fiscal_year) |>
summarize(amount = n()) |>
arrange(fiscal_year)
pg_schools |>
group_by(fiscal_year, amount) |>
summarize(count = n()) |>
arrange(fiscal_year)
pg_schools |>
group_by(fiscal_year, amount) |>
summarize (total = sum(amount)) |>
arrange(fiscal_year)
pg_schools |>
group_by(fiscal_year) |>
summarize (total = sum(amount)) |>
arrange(fiscal_year)
pg_schools |>
group_by(fiscal_year) |>
summarize (total = sum(amount)) |>
arrange(desc(fiscal_year))
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))|>
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))
group_by(vendor_name)
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))
group_by(vendor_name)
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))|>
group_by(vendor_name)
cleaned_md_payments|>
filter(str_detect(agency_name, "UNIVERSITY OF MARYLAND"))|>
group_by(vendor_name)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_payments|>
filter(str_detect(agency_name, "CAPITAL PROJECTS-UNIVERSITY OF MARYLAND"))|>
group_by(vendor_name)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_payments|>
filter(str_detect(agency_name, "CAPITAL PROJECTS- UNIVERSITY OF MARYLAND"))|>
group_by(vendor_name)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
md_grants_loans|>
filter(str_detect(Description, "STEM CELL RESEARCH GRANT"))|>
group_by(vendor_name)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
md_grants_loans|>
filter(str_detect(Description, "STEM CELL RESEARCH GRANT"))|>
group_by(vendor_name)|>
summarize (total = sum(Amount)) |>
arrange(desc(total))
md_grants_loans|>
filter(str_detect(Description, "STEM CELL RESEARCH GRANT"))|>
group_by('Fiscal Year')|>
summarize (total = sum(Amount)) |>
arrange(desc(total))
View(cleaned_md_grants_loans)
cleaned_md_grants_loans|>
filter(str_detect(Description, "STEM CELL RESEARCH GRANT"))|>
group_by(fiscal_year)|>
summarize (total = sum(Amount)) |>
arrange(desc(total))
cleaned_md_grants_loans|>
mutate(description = str_to_upper(source))
cleaned_md_grants_loans|>
mutate(description = str_to_upper(description))
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))|>
group_by(fiscal_year)|>
summarize (total = sum(Amount)) |>
arrange(desc(total))
cleaned_md_grants_loans|>
mutate(description = str_to_upper(description))
cleaned_md_grants_loans|>
mutate(description = str_to_upper(description))
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))|>
group_by(fiscal_year)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_grants_loans|>
mutate(description = str_to_upper(description)) |>
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))|>
group_by(fiscal_year)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_grants_loans|>
#mutate(description = str_to_upper(description)) |>
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))|>
group_by(fiscal_year)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_grants_loans|>
mutate(description = str_to_upper(description)) |>
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))|>
group_by(fiscal_year)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_grants_loans|>
#mutate(description = str_to_upper(description)) |>
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))|>
#group_by(fiscal_year)|>
#summarize (total = sum(amount)) |>
#arrange(desc(total))
cleaned_md_grants_loans|>
#mutate(description = str_to_upper(description)) |>
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))
#group_by(fiscal_year)|>
#summarize (total = sum(amount)) |>
#arrange(desc(total))
cleaned_md_grants_loans|>
mutate(description = str_to_upper(description)) |>
filter(str_detect(description, "STEM CELL RESEARCH GRANT"))|>
group_by(fiscal_year)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
cleaned_md_grants_loans|>
filter(str_detect(zip_code, "20742"))
cleaned_md_grants_loans|>
filter(str_detect(zip_code, "20742"))|>
group_by(grantee)|>
summarize (total = sum(amount)) |>
arrange(desc(total))
library(readr)
public_enrollment_by_grade <- read_csv("GitHub/data-journalism/major_assignments/reverse_engineering/data/public-enrollment-by-grade.csv")
View(public_enrollment_by_grade)
library(readxl)
Missing_Kids_Summary_File <- read_excel("GitHub/data-journalism/major_assignments/reverse_engineering/data/Missing-Kids-Summary-File.xlsx")
View(Missing_Kids_Summary_File)
library(readr)
private_enrollment_by_grade <- read_csv("GitHub/data-journalism/major_assignments/reverse_engineering/data/private-enrollment-by-grade.csv")
View(private_enrollment_by_grade)
library(readr)
population_by_age <- read_csv("GitHub/data-journalism/major_assignments/reverse_engineering/data/population-by-age.csv")
View(population_by_age)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse)
library(lubridate)
library(refinr)
options(scipen=999)
library(tidyverse)
library(lubridate)
library(refinr)
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
# Load required data
population-by-age.csv <- read_csv("reverse_engineering/population-by-age.csv")
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
# Load required data
population-by-age.csv <- read_csv("reverse_engineering/population-by-age.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
population-by-age.csv <- read_csv("reverse_engineering/population-by-age.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
population-by-age.csv <- read_csv("population-by-age.csv")
View(population)
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
population_by_age.csv <- read_csv("population_by_age.csv")
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
library(tidyverse)
# Load janitor
library(janitor)
#load lubridate
library(lubridate)
# Load required data
population_by_age.csv <- read_csv("reverse_engineering/population_by_age.csv")
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
population_by_age.csv <- read_csv("reverse_engineering/population_by_age.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
population_by_age.csv <- read_csv("reverse_engineering/population_by_age.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
private_enrollment_by_grade.csv <- read_csv("reverse_engineering/private_enrollment_by_grade.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
population_by_age.csv <- read_csv("reverse_engineering/population_by_age.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
private_enrollment_by_grade.csv <- read_csv("reverse_engineering/private_enrollment_by_grade.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")|>
private_enrollment_by_grade.csv <- read_csv("reverse_engineering/private_enrollment_by_grade.csv")|>
population_by_age.csv <- read_csv("reverse_engineering/population_by_age.csv")|>
public_enrollment_by_grade.csv <- read_csv("reverse_engineering/public_enrollment_by_grade.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
private_enrollment_by_grade.csv <- read_csv("reverse_engineering/private_enrollment_by_grade.csv")|>
population_by_age.csv <- read_csv("reverse_engineering/population_by_age.csv")|>
public_enrollment_by_grade.csv <- read_csv("reverse_engineering/public_enrollment_by_grade.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
private_enrollment_by_grade.csv <- read_csv("reverse_engineering/private_enrollment_by_grade.csv")
# Load required data
setwd("C:/Users/Cait/Documents/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
private_enrollment_by_grade.csv <- read_csv("reverse_engineering/private_enrollment_by_grade.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
private_enrollment_by_grade.csv <- read_csv("private_enrollment_by_grade.csv")
population_by_age.csv <- read_csv("reverse_engineering/population_by_age.csv")
# Load required data
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering")
private_enrollment_by_grade.csv <- read_csv("private_enrollment_by_grade.csv")
population_by_age.csv <- read_csv("population_by_age.csv")
public_enrollment_by_grade.csv <- read_csv("public_enrollment_by_grade.csv")
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
library(tidyverse)
# Load janitor
library(janitor)
#load lubridate
library(lubridate)
setwd("~/GitHub/JOURN472_reverse_engineering_project/reverse_engineering/data")
# Load required data
private_enrollment_by_grade.csv <- read_csv("data/private_enrollment_by_grade.csv")
population_by_age.csv <- read_csv("data/population_by_age.csv")
public_enrollment_by_grade.csv <- read_csv("data/public_enrollment_by_grade.csv")
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
library(tidyverse)
# Load janitor
library(janitor)
#load lubridate
library(lubridate)
View(population_by_age.csv)
View(private_enrollment_by_grade.csv)
View(public_enrollment_by_grade.csv)
